
import streamlit as st
import pandas as pd
import plotly.express as px
import unicodedata
import json
import requests
import common

def main():
    common.stream_page_config_start()
    # st.set_page_config(page_title="G√™neros Musicais e Distribui√ß√£o dos Artistas no Brasil", layout="wide")
    st.title("üé∂ Quais s√£o os g√™neros musicais e a distribui√ß√£o geogr√°fica dos principais artistas em atividade no Brasil?")

    st.markdown("""
    Quem s√£o os nomes mais ouvidos da m√∫sica brasileira hoje?  
    Este painel mostra os artistas em destaque nas plataformas digitais, organizados por popularidade, g√™nero musical e regi√£o de atua√ß√£o.  
    Acompanhe como a produ√ß√£o musical brasileira se manifesta em diferentes territ√≥rios e conhe√ßa o perfil dos artistas que fazem parte da cena independente e regional.
    """)

    caminho_arquivo = "datasets/artista.csv"
    try:
        df = pd.read_csv(caminho_arquivo)
    except FileNotFoundError:
        st.error(f"Arquivo n√£o encontrado no caminho especificado: {caminho_arquivo}")
        st.stop()

    # Renomear colunas para formato padronizado
    rename_dict = {
        'Posi√ß√£o': 'Posicao',
        'G√™nero': 'Genero',
        'Localiza√ß√£o': 'Localizacao'
    }
    df.rename(columns=rename_dict, inplace=True)

    # Confirmar colunas obrigat√≥rias
    colunas_esperadas = ['Posicao', 'Artista', 'Genero', 'Localizacao', 'Onda']
    if not all(col in df.columns for col in colunas_esperadas):
        st.error(f"Erro: As colunas esperadas n√£o foram encontradas no arquivo. Esperadas: {colunas_esperadas}")
        st.stop()

    # Indicadores principais
    try:
        artista_top = df.loc[df['Posicao'] == 1, 'Artista'].values[0]
    except:
        artista_top = 'N√£o encontrado'

    genero_mais_frequente = df['Genero'].mode()[0]

    st.markdown("### üìå Indicadores de Destaque")
    col1, col2 = st.columns(2)
    col1.metric("üéß Artista mais ouvido no Brasil em 2024", artista_top)
    col2.metric("üéº G√™nero musical mais presente nos estados", genero_mais_frequente)

    st.markdown("---")

    # 1. Ranking Nacional de Artistas
    st.subheader("üìä 1. Ranking Nacional de Artistas")
    st.markdown("Top 20 artistas brasileiros mais populares nas plataformas. Esta visualiza√ß√£o apresenta os artistas com maior volume de streams no cen√°rio nacional, com base nos dados mais recentes das plataformas de m√∫sica.")

    top_20 = df.sort_values("Posicao").head(20)
    st.dataframe(top_20[['Posicao', 'Artista', 'Genero', 'Localizacao']].reset_index(drop=True))

    st.markdown("---")

    # 2. Mapa Interativo
    st.subheader("üó∫Ô∏è 2. Mapa Interativo: Distribui√ß√£o Geogr√°fica dos G√™neros mais escutados")
    st.markdown("O que as regi√µes est√£o escutando? Mapeamos os g√™neros em destaque por regi√£o brasileira para entender como a produ√ß√£o musical se espalha pelo territ√≥rio nacional.")

    if ' - ' in df['Localizacao'].iloc[0]:
        df[['Cidade', 'Estado']] = df['Localizacao'].str.split(' - ', expand=True)
    else:
        df['Estado'] = df['Localizacao']

    geojson_url = 'https://raw.githubusercontent.com/codeforamerica/click_that_hood/master/public/data/brazil-states.geojson'
    response = requests.get(geojson_url)
    br_states = response.json()

    estado_map = {
        'Acre': 'AC', 'Alagoas': 'AL', 'Amapa': 'AP', 'Amazonas': 'AM', 'Bahia': 'BA', 'Ceara': 'CE',
        'Distrito Federal': 'DF', 'Espirito Santo': 'ES', 'Goias': 'GO', 'Maranhao': 'MA', 'Mato Grosso': 'MT',
        'Mato Grosso do Sul': 'MS', 'Minas Gerais': 'MG', 'Para': 'PA', 'Paraiba': 'PB', 'Parana': 'PR',
        'Pernambuco': 'PE', 'Piaui': 'PI', 'Rio de Janeiro': 'RJ', 'Rio Grande do Norte': 'RN',
        'Rio Grande do Sul': 'RS', 'Rondonia': 'RO', 'Roraima': 'RR', 'Santa Catarina': 'SC',
        'Sao Paulo': 'SP', 'Sergipe': 'SE', 'Tocantins': 'TO'
    }

    genero_estado = df.groupby('Estado')['Genero'].agg(lambda x: x.mode()[0]).reset_index()
    genero_estado['Estado'] = genero_estado['Estado'].map(lambda x: estado_map.get(x.strip(), x.strip()))

    fig_map = px.choropleth_mapbox(
        genero_estado,
        geojson=br_states,
        locations='Estado',
        color='Genero',
        featureidkey="properties.sigla",
        center={"lat": -14.5, "lon": -52},
        mapbox_style="carto-positron",
        zoom=3.5,
        title='G√™nero mais escutado por estado'
    )
    st.plotly_chart(fig_map, use_container_width=True)

    st.markdown("---")

    # 3. G√™neros Musicais em Alta
    st.subheader("üéµ 3. G√™neros Musicais em Alta")
    st.markdown("Quais estilos est√£o conquistando o p√∫blico? Esta an√°lise ajuda a compreender as tend√™ncias do gosto musical no pa√≠s e oferece refer√™ncias para novos artistas se posicionarem.")

    genero_count = df['Genero'].value_counts().reset_index()
    genero_count.columns = ['Genero', 'Numero de Artistas']
    fig_genero = px.bar(genero_count, x='Genero', y='Numero de Artistas', color='Genero')
    st.plotly_chart(fig_genero, use_container_width=True)

    st.markdown("---")

    # 4. Evolu√ß√£o da Popularidade
    st.subheader("üìà 4. Evolu√ß√£o da Popularidade dos Artistas")
    st.markdown("Para mais detalhes √© poss√≠vel comparar a trajet√≥ria dos artistas ao longo do tempo com base no volume de streams mensais.")

    artistas_selecionados = st.multiselect(
        "Selecione at√© 5 artistas para comparar:",
        df['Artista'].unique(),
        max_selections=5
    )

    if artistas_selecionados:
        df_filtrado = df[df['Artista'].isin(artistas_selecionados)]
        fig_evolucao = px.line(
            df_filtrado,
            x='Posicao',
            y='Onda',
            color='Artista',
            markers=True,
            labels={'Onda': 'Streams (proxy)', 'Posicao': 'Ranking'},
            title='Comparativo de Popularidade por Posi√ß√£o'
        )
        st.plotly_chart(fig_evolucao, use_container_width=True)
    common.stream_page_config_end()


if __name__ == '__main__':
    main()
